// Code generated by go-bindata.
// sources:
// templates/forgot_password.html
// templates/forgot_password_email.html
// templates/login.html
// templates/profile.html
// templates/register.html
// templates/verify.html
// templates/verify_email.html
// DO NOT EDIT!

package user

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesForgot_passwordHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xdf\x6f\xdb\x36\x10\x7e\xef\x5f\x71\x53\x3b\xd8\x46\x60\x59\xe9\xb6\x17\x47\x36\x50\x04\xcd\xc3\x80\xad\x1d\xb2\xb7\x61\x28\x68\xf1\x64\xb1\xa1\x48\x81\xa4\x9c\x18\x82\xfe\xf7\x1d\xf5\xc3\x96\x64\x07\x2b\x8a\x32\x0f\xb1\xc8\xd3\xf7\xdd\x7d\xf7\xe9\xa4\xaa\xe2\x98\x0a\x85\x10\x94\x16\xcd\x97\x54\x9b\xbd\x76\x5f\x0a\x66\xed\xb3\x36\x3c\xa8\xeb\x37\x55\xe5\x30\x2f\x24\x73\x14\x93\x21\xe3\x68\x02\x08\x69\xff\x0d\xd0\x8a\xad\x3b\x4a\x04\x77\x2c\x70\x13\x38\x7c\x71\xab\xc4\xda\x60\xdb\x9c\xf9\xc5\xc5\x21\xec\xc1\x96\x39\x5a\xcb\xf6\x08\xd5\xe9\xd8\xaf\x67\xc1\x5d\xb6\x86\xdf\xa2\x9f\xef\x46\xfb\x39\x33\x7b\xa1\xd6\x10\x01\x2b\x9d\x86\xf7\x51\xf1\x32\x0e\xf0\x74\x4b\x26\xc5\x9e\x82\x12\x54\x0e\xcd\xf9\xbc\x1e\x65\x40\x55\xe5\xcb\x54\xa0\xe4\x3f\x82\xfb\x8c\x5d\xca\x10\x8d\xd1\xa6\xaf\xcc\xfe\xa8\xd2\xa4\xb0\x6e\xd9\x48\xbb\x06\xa5\x15\x8e\x4f\x0b\xc6\xb9\x50\xfb\xa5\xc4\xd4\x11\xc8\xb7\x65\x26\xc5\x24\xb9\x1d\xb5\x04\xcd\x32\xd1\x52\x9b\x35\xbc\x7d\x78\x88\x68\xdd\x4d\x42\x5e\x96\x36\x63\x5c\x3f\xfb\x5c\xfd\xdf\x6d\xf1\xf2\x4a\x28\x4b\x9e\xf6\x46\x97\x8a\x0f\x10\xef\xdf\xdf\xff\x32\x0e\xeb\xcf\xa2\xe8\x1a\x5b\x93\x90\x61\x5c\x94\x76\x0d\xbf\x4e\x45\x69\x55\x5b\xee\xb4\x73\x3a\x5f\xc3\xed\x85\x6a\x63\x5d\x6e\xaf\x34\x2d\x5e\x35\xa2\x6e\x7b\xf3\x26\x46\x14\x6e\xe8\xde\xaf\xec\xc0\xda\xdd\x81\x89\x0f\xcc\x40\xa3\xa6\x85\x0d\xfc\xfe\xf8\xe9\x4f\xb2\xb4\xb1\x38\xaf\xaa\xf0\xd1\x19\x62\xb4\xe1\x03\x39\xec\x63\x13\x52\xd7\x8b\x33\xeb\xe9\x87\x48\x61\xee\x69\x74\x0a\x5f\xff\x2a\xd1\x1c\xe1\xa7\xcd\x06\x66\x24\x57\xf3\xf4\xf1\xd9\x62\xd2\x9d\x77\xf3\xb4\x54\x89\x13\x5a\xcd\xa7\x47\x3d\x5e\x9b\x52\x28\x51\xed\x5d\x06\x04\x17\x5d\x8b\xf4\xcb\xa0\x2b\x8d\xba\xbb\x38\xab\x2f\x76\x2e\x36\x4e\xfe\xd9\x50\x4a\xb3\xb8\x94\x90\x48\x7a\x9e\x37\xc1\xd8\x5e\xc1\x36\x5e\x95\x72\x3b\x5b\x5c\x92\x5c\x6c\xd0\xd3\x08\x73\xaf\xa9\x20\xd0\xe8\x8e\xfe\xc5\x30\xaa\x85\xb6\x6e\x6e\x5e\xab\xa5\x67\x0c\x59\x51\xa0\xe2\x94\x93\x14\xdb\xd9\x4d\x0b\xf0\x8f\xf8\x37\xfc\xa3\x0d\xb8\x99\xc5\x2b\x7f\x72\x25\x23\xbf\xa8\x98\xb7\xc3\xbb\x1e\xfc\x74\x58\x84\xe4\xa0\x7b\x5f\xdf\xbc\xad\x2f\xb8\x72\xf7\x37\x88\xf6\x6e\x1e\xf8\x91\x13\x2c\xc2\xc2\x60\x93\x65\x9f\xf5\x04\x6f\xe8\x95\x93\x43\x1b\xfb\x75\x16\xad\x2a\xea\xf4\xc9\x65\x1f\x73\x26\xe4\x07\xce\x0d\xa1\xd5\xf5\x88\x3a\xa6\x39\xd7\xb7\x66\x3a\x70\x07\x56\xf6\xeb\x03\xf4\x01\x64\x0c\x8b\x0e\xd0\xc3\x42\xc6\x2c\xec\x10\x15\x58\x9a\xa5\x40\x63\x69\x60\xef\x31\x71\x38\x82\xfb\x2c\x91\x59\x84\x24\xc3\xe4\x09\x8e\xba\x34\x1d\x9e\x6f\x33\x83\x03\x1a\x91\x8a\x84\x79\x27\xd3\x0c\x52\x4f\xe0\x32\xe6\x20\x61\x8a\xc8\x80\xde\x39\xdc\x53\xb5\x79\x34\x37\xf7\xb9\x9d\x49\xe2\x15\xd5\xb6\xed\xe4\x40\x69\xb1\x3e\xb7\x20\xf6\x3a\x93\x27\x5c\xa6\xf9\x26\xf8\xfc\xe9\xf1\xef\xa0\x53\xee\x9a\x30\xe7\xf7\xc0\x44\x92\x26\x50\xb2\x1d\x36\x69\x93\xb9\x7d\x05\xc1\xb6\x2b\xad\x79\xb7\x0c\x4b\x63\xad\x12\x20\x14\x34\x33\xeb\x95\x12\xd6\xe4\x40\x8f\x79\x85\x4b\xa8\xa2\x74\x20\x78\x4f\x05\x8a\xe5\x78\xba\x38\x0f\xa4\x00\x56\xe3\xbb\x3b\x31\xbe\xb3\xc4\x96\xb6\x85\xb7\xe5\x2e\x17\x44\x70\x60\xb2\xa4\xcb\xc7\xee\xf2\x7f\xf8\xe2\x95\x67\x38\x75\x43\x71\xff\x25\x30\xfc\x44\x48\xb5\x76\xfd\x27\x42\x17\xf0\x5f\x00\x00\x00\xff\xff\xee\xd6\xc2\x99\x64\x08\x00\x00")

func templatesForgot_passwordHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesForgot_passwordHtml,
		"templates/forgot_password.html",
	)
}

func templatesForgot_passwordHtml() (*asset, error) {
	bytes, err := templatesForgot_passwordHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/forgot_password.html", size: 2148, mode: os.FileMode(436), modTime: time.Unix(1465185969, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesForgot_password_emailHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xc1\x4e\xf3\x30\x10\x84\xef\x7e\x8a\xfd\x7b\xee\xef\x07\xe0\x5a\x90\xe0\x82\x10\x50\x24\x4e\x91\x89\x37\xc9\xaa\x8e\xb7\xd8\xeb\x96\xc8\xf2\xbb\xe3\xa4\x8a\x40\xa8\xc7\xf5\xcc\xac\x67\xbf\x9c\x2d\x76\xe4\x11\x36\x29\x62\x68\x3a\x0e\x3d\x4b\x73\x34\x31\x9e\x39\xd8\x06\x47\x43\x6e\x53\x8a\xba\x47\xe7\x18\x72\xd6\xfb\x6a\xd3\xb7\x14\x8f\xce\x4c\x8f\x66\xc4\x52\xb6\x4a\xbd\x73\x82\xc1\x9c\x10\x02\x7e\x26\x8c\x82\x16\x84\xeb\x10\x51\x60\xe2\x14\xe6\xe0\x8e\x7d\x47\xbd\x8e\x24\xd8\xf8\x25\x08\xeb\x37\x5a\xa9\x27\x87\x26\xe2\xef\xc8\x2a\xc2\xc7\x04\xad\xa3\xf6\x40\xbe\x07\x19\x10\x3a\xae\x55\xce\xf3\xe4\xc8\x1f\x6e\xfe\xee\x4e\xc1\x95\x72\x79\x13\xfc\x12\x7d\xe7\x1d\x9d\xd0\xd7\x39\xa0\xde\x0b\x39\xfd\x22\xe1\x19\x6b\xff\x16\x61\x4d\x5e\x3d\x7e\x29\xd3\x04\x4e\x52\xf1\xe4\x96\x2d\x96\x0d\x5c\x00\xbc\x61\xa0\x8e\x5a\x23\xc4\x7e\x37\x0b\x45\xa9\x87\x6e\x2e\x0e\x96\x2c\x78\x96\x15\x05\x98\x9f\x4b\x96\x85\xdb\xc5\x35\x9a\xa9\x3a\x63\xc0\xde\x54\x41\x06\x8a\xb0\xb0\xae\x28\x5e\x07\xe3\x0f\xb3\xe9\x9f\xfa\x7f\x1d\x9c\xca\x19\xbd\x2d\xe5\x3b\x00\x00\xff\xff\x0e\x0f\x60\xc7\xbd\x01\x00\x00")

func templatesForgot_password_emailHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesForgot_password_emailHtml,
		"templates/forgot_password_email.html",
	)
}

func templatesForgot_password_emailHtml() (*asset, error) {
	bytes, err := templatesForgot_password_emailHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/forgot_password_email.html", size: 445, mode: os.FileMode(436), modTime: time.Unix(1465187182, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\xdf\x4f\xdb\x30\x10\x7e\xe7\xaf\xb8\x79\x4c\x6d\x85\xd2\x14\xb6\xbd\x84\x24\x7b\x40\xf0\x84\x34\x36\xc6\xf3\xe4\xd6\x4e\x6b\xe6\xc4\x91\x7f\x94\xa2\x28\xff\xfb\x6c\x27\x69\x1c\x84\x98\xc4\x1c\x29\xd2\x7d\x77\xbe\xfb\xee\xf3\xd9\x4d\x43\x68\xc1\x2a\x0a\xc8\x28\x2a\x7f\x73\xb1\x65\x15\x6a\xdb\x93\xa6\xd1\xb4\xac\x39\xd6\xd6\xb3\xa3\x98\x50\x89\x60\x69\xf1\x93\x54\xe9\x67\x4e\x41\x3f\xd7\x34\x43\x9a\x1e\x74\xbc\x51\x0a\xe5\x27\x60\x17\x61\xfb\x65\x21\x64\x19\x15\x8c\x72\x02\x8d\x07\xdd\x7a\x62\x44\xef\x12\xf8\xba\xfa\x74\x79\xc4\x4a\x2c\x6d\xad\x04\x56\x80\x8d\x16\x70\xb1\xaa\x0f\x9d\xb3\xf5\x7f\xc3\x97\x54\x4a\x21\xa3\x92\x2a\x85\xb7\x54\xbd\x37\x9d\x5b\x9c\x29\x1d\x79\xe2\x09\x54\xa2\xa2\xa3\xa7\xc6\x84\xb0\x6a\x1b\x71\x5a\x68\xbb\xf9\x6d\x06\x9c\x05\x24\xd6\x42\x5a\x55\xa2\x8d\xe0\x42\x26\xf0\xf1\xe6\x66\x65\xd7\x65\xe0\x3e\x44\x6a\x87\x89\x78\x72\x9c\xdc\x77\x5e\x1f\x5e\x09\xc3\x9b\x3f\x5b\x29\x4c\x45\x82\x4c\x57\x17\x57\x9f\xc7\x90\x01\x5f\xad\x5e\x56\xf0\x04\x24\x26\xcc\xa8\x04\xbe\x84\x0d\x77\x6a\x44\x6b\xa1\xb5\x28\x13\x38\x9f\xa8\x31\xed\xf9\x3c\x10\x3e\x8d\xbd\x48\xb9\x3b\xe6\x8d\x64\xb5\x0e\xcf\xf9\x11\xef\x71\x87\xf6\xc7\xbd\xc7\x12\xbc\x42\x90\x41\xd3\x2c\xef\xb5\xb4\x59\xd5\xf2\xd6\xcd\xd0\xb5\xc3\xdb\xb6\x4b\xec\x7f\xac\x80\xb9\xcb\x26\x0a\x78\xfc\x61\xa8\x7c\x86\x0f\x59\x06\x33\xdb\xb9\x1f\x40\x32\x5b\x04\xe2\x9e\xce\x0b\x53\x6d\x34\x13\xd5\x3c\x84\x87\x3c\x7d\xd5\x0c\x10\x7a\xe9\x76\x4b\x52\x6d\x64\x75\x39\xc1\xdb\x89\x35\x31\x4e\xe7\xc8\x4d\x2d\x5a\x2c\x6b\x49\x6b\x5a\x91\xf9\x7c\x96\x1a\x0e\x1b\x8e\x95\xca\xd0\x74\x08\x50\x9e\x72\x96\xcf\xce\x3c\x7a\x36\x4b\x63\x6b\xa5\xb1\xe1\xf9\x6c\xb1\x18\x2b\xb6\x8b\x40\x52\xaf\x99\xd3\xd4\x55\x81\x92\xea\x9d\x20\x19\xba\xfb\x7e\xff\xcb\x0a\xe9\xc3\x52\x7b\x73\x86\x72\xe3\x05\xea\x65\xf6\x01\x1c\xaf\x29\x07\xeb\xcb\xfc\x45\xad\x70\x49\x51\x7e\x5d\x62\xc6\xe3\x87\xde\x4e\x2c\x17\x17\x15\xec\x62\x55\x6d\x34\x30\x12\x6c\x02\xf7\x0f\xed\xf1\x84\x11\xc4\xdd\xde\x34\xb6\x7c\xfe\x8f\xda\x9d\xdd\xf0\x64\x07\xf4\x4d\x52\x75\x1f\x34\x90\x1a\xed\x8e\xd4\x68\xbf\x8b\x58\x57\xa8\x4b\xa5\xcc\xba\x64\xb6\xc3\x3d\xe6\xc6\x9a\xf7\xbd\x39\xcd\x7b\x9c\x8c\xa6\xb1\x53\x76\x1c\xe8\x1b\x21\xb7\x42\x0f\x1d\x3d\xfc\xbc\x6d\xc7\x61\xfa\x27\x0b\x1f\x84\x61\x27\x69\x91\xa1\xe0\x96\xbc\x92\x14\xe5\x1d\x08\x03\xfa\x2d\x8d\x71\xd0\xcf\x48\xb2\x69\xec\x94\xfa\xd7\x38\x76\x45\xad\x22\xe1\x7b\x5d\x08\xa1\x87\xf7\xba\x8f\xfc\x1b\x00\x00\xff\xff\xa9\xb6\x61\x95\xe7\x05\x00\x00")

func templatesLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoginHtml,
		"templates/login.html",
	)
}

func templatesLoginHtml() (*asset, error) {
	bytes, err := templatesLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/login.html", size: 1511, mode: os.FileMode(436), modTime: time.Unix(1465184548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProfileHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x51\x6f\xe2\x38\x10\x7e\xef\xaf\xf0\xb9\x3d\x01\x42\x84\xb4\x77\xf7\x02\x49\x5e\xda\xf2\x70\xd2\xb6\x5d\xb1\xdd\x97\xd5\x6a\x65\x88\x03\xee\x3a\x71\x64\x3b\x14\x14\xe5\xbf\xef\xd8\x4e\x48\x40\x5d\x84\xb6\x35\x12\x64\xc6\xdf\xcc\x7c\xf3\x79\x62\x51\x96\x31\x4d\x58\x46\x11\x2e\x14\x95\x3f\x72\x29\x12\xc6\x29\xae\xaa\x8b\xb2\xd4\x34\xcd\x39\xd1\xb0\xb7\xa6\x24\xa6\x12\x23\x0f\xfc\x17\x81\xd2\x3b\x4e\x91\xde\xe5\x34\xc4\x9a\x6e\xf5\x78\xa9\x14\x8e\x2e\x10\xac\x98\x6d\xbc\x44\xc8\x74\x94\x30\xca\x63\x54\x5a\xa7\x59\xaf\x2c\xd6\xeb\x09\xfa\xcf\xff\x7b\xba\xf7\xa5\x44\xae\x58\x36\x41\x3e\x22\x85\x16\xe8\xc6\xcf\xb7\x6e\xb3\xb2\xdf\x05\xf7\xa8\x94\x42\x8e\x52\xaa\x14\x59\x51\xf5\xa7\xe9\xcc\xe2\x4c\xe9\x91\x25\x3e\x41\x99\xc8\x68\xbb\x93\x93\x38\x66\xd9\x6a\xc4\x69\xa2\x21\xf8\x34\x03\xce\x3a\x24\x16\x42\x82\x2a\xa3\xa5\xe0\x42\x4e\xd0\xe5\x6c\xe6\xc3\x9a\x76\xb6\xb7\x23\xb5\x26\xb1\x78\x35\x9c\xcc\xe7\x3a\xdf\xbe\x01\x23\xcb\x9f\x2b\x29\x8a\x2c\xee\x64\xba\xbd\xb9\xfd\xa7\x85\x34\x7e\xdf\x3f\xae\x60\x09\x48\x12\xb3\x42\x4d\xd0\xbf\xdd\x86\x9d\x1a\xa3\x85\xd0\x5a\xa4\x13\x74\x7d\xa0\xc6\x61\xcf\xd7\x1d\xe1\x83\xb1\x15\x29\x32\xc7\xbc\x94\x2c\xd7\xdd\x73\x7e\x21\x1b\xe2\xbc\xf5\x71\x6f\x88\x44\x56\x21\x85\x42\xf4\xff\xfc\xf1\xc1\xcb\x89\x54\xb4\x5f\x96\xde\x5c\x4b\xa8\xa0\xbc\x19\x4c\xc3\xbd\x85\x54\xd5\xc0\x55\xb1\x5f\x2c\x41\x7d\x93\x5a\x24\xe8\xe5\x73\x41\xe5\x0e\xfd\x15\x86\xa8\x07\x32\xd8\x79\x8c\x7b\x83\x8e\xd2\x57\xfd\xa4\xc8\x96\x9a\x89\xac\xdf\x75\x37\x79\x1c\x05\x8f\xd3\x6c\xa5\xd7\x08\xd2\xf8\xc7\x28\xb3\x24\xd5\x85\xcc\xa6\x07\xfe\xea\xc0\x3a\x30\xf6\x67\x1e\x42\xf9\x5e\x50\x70\xb4\xe4\x44\xa9\x10\x1f\x8e\x04\x8e\x82\x71\xc1\xa3\xde\x60\xfa\xfb\x54\xf0\x46\xa0\xbe\xd1\x8a\x41\x32\x7f\x0a\x3f\x01\x3a\xe0\x0c\xae\xe1\xf0\x2d\xce\x4d\x15\x8f\xe4\x39\xcd\x62\xe0\xc1\x59\xd4\x1b\xba\xe0\x6f\xec\xbb\xf7\xc9\x01\x86\xbd\x60\x6c\x76\x8e\x58\x38\xed\x7a\x97\xdd\x88\x99\x79\x33\x07\x1e\x4c\xc0\xad\xe9\xa7\xef\xfa\xc1\x83\xb3\x85\xb9\xea\x63\xf3\x8a\xe3\x81\x97\x4b\x6a\x59\x35\x2c\x3b\x39\x9a\xb3\xb6\x13\x65\x47\xc6\x8c\x94\x89\x83\x9e\xf4\x5a\xc4\x21\x7e\x7a\x9c\x7f\x81\x39\xb2\xb0\x00\x2e\x8e\x46\xdf\xf6\xfe\xa8\xa7\xcc\x02\x38\x59\x50\x6e\x94\x0c\xed\x4d\x95\x91\x94\xe2\xe8\x8e\x29\xb8\xa1\x76\xe8\x01\xac\x09\x28\x60\x30\x9d\x18\x96\xe5\x85\x46\x0c\x6a\xc5\x0e\x68\x70\x18\x99\xd8\x23\x57\x3b\xe4\x18\x86\x9a\x17\x60\xd8\x19\x16\x12\xfa\xf2\x9e\xa1\xa0\x77\xd7\xe2\xab\x0a\xa3\xb1\xab\x13\x8c\x81\xf9\xfb\x9a\x78\xae\x9f\x4e\x36\xb0\x87\xd7\xec\x5b\xfb\x0c\xea\x4d\x85\x8f\xe0\x4d\x53\xc2\x38\x8e\xee\xcd\xcf\x49\xc6\x0e\x58\xd3\xad\x8d\x33\xb8\xda\xc4\x1f\x41\x34\x07\xd8\x2b\x5c\x90\x38\x7a\xaa\x9f\x4e\xd2\xdd\xc3\x6b\xc6\xad\xed\x48\xb7\xf6\x7b\x89\x6d\xa8\x64\xc9\xee\x69\x4f\xef\xab\xb5\xd1\x59\x2c\x8f\x62\x6b\xae\xc7\xde\x0f\x61\xec\x8a\xba\x54\xaa\x58\xa4\xac\x3d\xb3\x79\x6d\x1e\xe5\x0d\xc6\x26\x13\x3c\x74\xff\x3a\x24\x42\xe8\xe6\xaf\x43\x59\xc2\x6d\x51\x55\xbf\x02\x00\x00\xff\xff\xa9\x54\x51\x6b\x74\x08\x00\x00")

func templatesProfileHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesProfileHtml,
		"templates/profile.html",
	)
}

func templatesProfileHtml() (*asset, error) {
	bytes, err := templatesProfileHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/profile.html", size: 2164, mode: os.FileMode(436), modTime: time.Unix(1464039900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRegisterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x95\x51\x6f\xda\x30\x10\x80\xdf\xfb\x2b\x3c\xb7\x13\x20\x44\x48\xbb\xed\x05\x92\xbc\x54\xe5\x61\xd2\xd6\x6e\x6c\x7b\x99\xa6\xc9\x10\x07\xdc\x39\x71\x64\x3b\x14\x14\xe5\xbf\xef\x6c\x27\x60\x50\x57\x55\x5d\x8d\x14\x72\xe7\xf3\xdd\x77\xe7\xb3\x53\xd7\x29\xcd\x58\x41\x11\xae\x14\x95\xbf\x25\x5d\x31\xa5\xa9\xc4\x4d\x73\x56\xd7\x9a\xe6\x25\x27\x1a\x26\xd7\x94\xa4\xa0\x45\x01\xe8\xcf\x22\xa5\x77\x9c\x22\xbd\x2b\x69\x8c\x35\xdd\xea\xf1\x52\x29\x9c\x9c\x21\x18\x29\xdb\x04\x99\x90\xf9\x28\x63\x94\xa7\xa8\xb6\x4a\x33\x1e\x58\xaa\xd7\x13\xf4\x21\x7c\x3b\xdd\xeb\x72\x22\x57\xac\x98\xa0\x10\x91\x4a\x0b\x74\x15\x96\x5b\x37\xd9\xd8\x67\xc5\x03\x2a\xa5\x90\xa3\x9c\x2a\x45\x56\x54\xbd\xd4\x9d\x19\x1c\xf2\x1a\x59\xf0\x09\x2a\x44\x41\x0f\x33\x25\x49\x53\x56\xac\x46\x9c\x66\x1a\x16\x3f\x4d\xc0\x99\x07\xb1\x10\x12\xaa\x32\x5a\x0a\x2e\xe4\x04\x9d\xcf\x66\x21\x8c\xa9\x37\xbd\x1d\xa9\x35\x49\xc5\x83\x61\x32\xbf\xcb\x72\xfb\x88\x19\x59\xfe\x59\x49\x51\x15\xa9\xe7\xe9\xfa\xea\xfa\xdd\xc1\xa4\xd3\x87\xe1\x69\x04\x0b\x20\x49\xca\x2a\x35\x41\xef\xfd\x84\x5d\x35\x46\x0b\xa1\xb5\xc8\x27\xe8\xf2\xa8\x1a\xc7\x39\x5f\x7a\x85\x8f\xc6\xb6\x48\x89\xd9\xe6\xa5\x64\xa5\xf6\xf7\xf9\x9e\x6c\x88\xd3\xb6\xdb\xbd\x21\x12\xd9\x0a\x29\x14\xa3\x8f\xf3\xdb\xcf\x41\x49\xa4\xa2\xfd\xba\x0e\xe6\x5a\x42\x04\x15\xcc\xa0\x1b\x6e\xac\x49\xd3\x0c\x5c\x14\xfb\x60\x19\xea\x1b\xd7\x22\x43\xf7\x5f\x2a\x2a\x77\xe8\x4d\x1c\xa3\x1e\x94\xc1\x36\x64\xda\x1b\x78\x95\xbe\xe8\x67\x55\xb1\xd4\x4c\x14\x7d\x5f\xdd\xf9\x71\x08\x01\xa7\xc5\x4a\xaf\x11\xb8\x09\x4f\xad\xcc\x90\x54\x57\xb2\x98\x1e\xe9\x9b\x23\xe9\x48\xd8\xef\x79\x0c\xe1\x7b\x51\xc5\xd1\x92\x13\xa5\x62\x7c\xdc\x12\x38\x89\xc6\x15\x4f\x7a\x83\xe9\xbf\x5d\xc1\x89\x40\x7d\x53\x2b\x06\xce\xc2\x29\xfc\x45\xe8\x88\x19\x54\xc3\xe1\x63\xcc\x5d\x94\x80\x94\x25\x2d\x52\xe0\xe0\x2c\xe9\x0d\xdd\xe2\x9f\xec\x57\xf0\xc9\x19\x0c\x7b\xd1\xd8\xcc\x9c\x50\xb8\xda\xf5\xce\xfd\x15\x33\x73\x32\x07\x01\x74\xc0\xb5\xc9\xa7\xef\xf2\xc1\x83\x67\x17\xe6\xa2\x8f\xcd\x11\xc7\x83\xa0\x94\xd4\x52\x75\x94\x9e\x8f\x6e\xaf\x6d\x47\xd9\x96\x31\x2d\x65\xd6\x41\x4e\x7a\x2d\xd2\x18\xdf\xdd\xce\xbf\x41\x1f\x59\xb3\x08\x2e\x8e\xae\xbe\x87\xfb\xa3\xed\x32\x6b\xc0\xc9\x82\x72\x53\xc9\xd8\x5e\x55\x05\xc9\x29\x4e\xbe\xb7\x6f\x13\xc8\xde\xcc\x7b\xf6\xac\x28\x2b\x8d\x58\xea\x99\x23\xf3\xf4\xe5\x43\x6b\x63\x68\x65\x5e\x81\xe0\x75\xee\xd7\xf6\x32\xec\x82\x34\x0d\x46\x63\x17\x21\x1a\x03\xef\x4b\xd0\x69\x4e\x18\xc7\xc9\x8d\xf9\x7b\x12\xda\x19\xb6\xc4\xad\xf0\x3c\x5c\xeb\xfb\x35\x58\x4b\x30\x7b\x80\x1b\x06\x27\x77\xed\xdb\x93\xc4\x7b\xf3\x16\xfa\x20\x3b\xee\x83\xfc\xbf\x60\x1b\x2a\x59\xb6\xbb\xdb\xe3\xfd\xb0\x32\x7a\x16\xe5\xc9\xda\x96\xf5\x54\xfb\x2a\xc4\x2e\xa8\x73\xa5\xaa\x45\xce\x0e\xdb\x36\x6f\xc5\x13\xbf\xd1\xd8\x78\x82\x17\xff\xdb\x9b\x09\xa1\xbb\x6f\x6f\x5d\xc3\x71\x6b\x9a\xbf\x01\x00\x00\xff\xff\xe3\x40\xc4\x3a\xb6\x07\x00\x00")

func templatesRegisterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRegisterHtml,
		"templates/register.html",
	)
}

func templatesRegisterHtml() (*asset, error) {
	bytes, err := templatesRegisterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/register.html", size: 1974, mode: os.FileMode(436), modTime: time.Unix(1464039900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVerifyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\x3d\x8b\xe3\x30\x10\xed\xfd\x2b\x06\xc1\x95\x91\xc3\x41\x38\x48\x6c\x17\x57\xa7\xba\xe3\x0e\xb6\x5a\x14\x6b\x6c\x0b\x64\xc9\x2b\x8d\xbd\x09\xc2\xff\x7d\xc7\x89\x93\xdd\x2d\xa2\xc2\x18\xbd\xa7\x79\x1f\x4c\x4a\x1a\x1b\xe3\x10\xc4\x18\x31\xbc\x4e\x18\x4c\x73\x11\xf3\x9c\xa5\x44\xd8\x0f\x56\x11\x43\x1d\x2a\x8d\x41\x80\xe4\xfb\xac\x88\x74\xb1\x08\x74\x19\xb0\x14\x84\x67\xca\xeb\x18\x45\x95\x01\x1f\x6d\x26\x79\x1b\xb1\xe9\x31\x46\xd5\x22\xa4\x2b\xb0\x9c\x77\xa3\xa9\xdb\xc3\x6e\xfb\xe3\xf0\xb8\xeb\x55\x68\x8d\xdb\xc3\x16\xd4\x48\x1e\x7e\x6e\x87\xf3\x27\xb8\x0c\xdf\x28\x6b\x5a\x26\xd4\xe8\x08\xc3\x0d\x9b\xb3\x22\xbf\x9a\xa8\xd8\x0d\x4b\x42\x6d\x55\x8c\xa5\xf8\xae\xbc\x5a\x4a\xc9\x34\x20\x7f\x7b\x6f\x51\xb9\x28\xff\x2f\x1c\x83\x9a\x93\xdc\x65\x5e\xfc\x18\x40\xd5\xb5\x1f\x1d\x41\xa7\x22\x9c\x10\x1d\x4c\x2b\x51\x16\xa7\x00\x79\xc5\x24\x0e\x60\x2d\x83\x10\x50\x9b\x80\x35\xa1\x06\xf6\x4c\x1d\x42\xa1\xa0\x0b\xd8\x94\x22\x25\xf9\x97\x82\x71\x6d\x94\x47\xcf\xc9\xfe\xfd\x39\xce\xb3\xa8\xae\xff\x45\xae\x2a\x18\x96\x4e\x8c\x83\x1d\x44\xac\xbd\xd3\x51\x3e\x7c\x14\x3d\x12\xcf\x21\x1a\x36\xf8\x36\x9a\xa9\x14\x3c\x32\x60\xec\x04\x30\x93\xb8\x80\x52\xfc\x3a\xc0\x18\x6c\xf9\x44\x66\x0d\x8c\x36\xe2\xb3\x7c\xfc\xb5\x1a\x9c\xa7\x25\xc8\x23\xe3\xfd\xa1\x5b\x7a\x29\x72\xee\x94\xab\xfd\xba\x01\x8d\xf7\x74\xdf\x80\x95\xf7\x11\x00\x00\xff\xff\xb6\xfe\xa1\xc9\x3a\x02\x00\x00")

func templatesVerifyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesVerifyHtml,
		"templates/verify.html",
	)
}

func templatesVerifyHtml() (*asset, error) {
	bytes, err := templatesVerifyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/verify.html", size: 570, mode: os.FileMode(436), modTime: time.Unix(1465185247, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVerify_emailHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xc1\x4a\xc4\x40\x0c\x86\xef\xf3\x14\x71\xcf\x3a\x0f\xe0\x75\x15\x3c\x89\xa8\xeb\xb5\x8c\x6d\xda\x0d\xcd\x66\x24\x93\x2e\x96\x21\xef\x6e\xbb\x45\x58\xc4\xe3\xcc\xcf\xf7\xff\xf9\x6a\xed\xb0\x27\x41\xd8\x4d\x05\xb5\x39\xa3\x52\x3f\x37\x78\x4a\xc4\x3b\xf7\xf0\x84\xcc\x19\x6a\x8d\x87\x25\x8d\x0f\x54\xbe\x38\xcd\xcf\xe9\x84\xee\xb7\x21\xbc\x1f\x93\x8c\x30\xe7\x09\xfa\xac\xa0\x38\x50\xb1\xa5\x40\x06\x48\xb6\x42\xfb\x2c\x3d\x0d\xb1\x90\x61\x23\x17\x28\x86\xf0\xc2\x98\x0a\xc2\xb6\xb4\xc2\x0a\x97\x39\x48\x5d\xa7\x58\x0a\x7c\xce\xd0\x32\xb5\xe3\xda\x63\x47\x2a\xc0\x24\xe3\xfd\xdf\xbe\x49\xd9\x7d\xfb\x33\xfc\xb6\xf8\x28\x4c\x67\x94\xe5\xad\x18\x0f\x46\x1c\xdf\x4c\x5f\x71\xb9\xb7\x45\xf8\x25\xaf\x1d\x35\x4f\xb6\x68\xd7\x36\x77\xe8\x3b\xd8\x0c\x3f\xd6\x8c\xda\x64\x94\x65\xbf\x06\x7e\x65\x79\x13\xee\xfe\xb7\x0a\xb5\xa2\x74\xee\x3f\x01\x00\x00\xff\xff\xe3\x91\xe9\xb9\x4d\x01\x00\x00")

func templatesVerify_emailHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesVerify_emailHtml,
		"templates/verify_email.html",
	)
}

func templatesVerify_emailHtml() (*asset, error) {
	bytes, err := templatesVerify_emailHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/verify_email.html", size: 333, mode: os.FileMode(436), modTime: time.Unix(1465186595, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/forgot_password.html": templatesForgot_passwordHtml,
	"templates/forgot_password_email.html": templatesForgot_password_emailHtml,
	"templates/login.html": templatesLoginHtml,
	"templates/profile.html": templatesProfileHtml,
	"templates/register.html": templatesRegisterHtml,
	"templates/verify.html": templatesVerifyHtml,
	"templates/verify_email.html": templatesVerify_emailHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"forgot_password.html": &bintree{templatesForgot_passwordHtml, map[string]*bintree{}},
		"forgot_password_email.html": &bintree{templatesForgot_password_emailHtml, map[string]*bintree{}},
		"login.html": &bintree{templatesLoginHtml, map[string]*bintree{}},
		"profile.html": &bintree{templatesProfileHtml, map[string]*bintree{}},
		"register.html": &bintree{templatesRegisterHtml, map[string]*bintree{}},
		"verify.html": &bintree{templatesVerifyHtml, map[string]*bintree{}},
		"verify_email.html": &bintree{templatesVerify_emailHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

