// Code generated by go-bindata.
// sources:
// templates/forgot_password.html
// templates/forgot_password_email.html
// templates/login.html
// templates/profile.html
// templates/register.html
// templates/verify.html
// templates/verify_email.html
// DO NOT EDIT!

package user

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesForgot_passwordHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x4c\xb9\x29\x2c\x23\xb0\xac\x6c\xdb\x8b\x2c\x19\x58\x04\x9b\x43\x81\x76\xb7\x48\x6f\x45\xb1\xa0\xc5\x91\xcd\x0d\x45\x0a\xfc\x70\x62\x08\xfa\xef\x05\x29\xcb\x96\x64\x07\x5d\x2c\x96\xb9\x44\x9c\xe1\xbc\x37\x6f\x9e\x29\x35\x0d\xc3\x92\x4b\x04\xe2\x0c\xea\x2f\xa5\xd2\x5b\x65\xbf\xd4\xd4\x98\x17\xa5\x19\x69\xdb\x9b\xa6\xb1\x58\xd5\x82\x5a\x04\xb2\x43\xca\x50\x13\x88\xdb\xf6\xe6\x06\x00\x20\x33\xf6\x20\x10\xec\xa1\xc6\x9c\x58\x7c\xb5\xcb\xc2\x18\xb2\x0e\x31\xbf\x18\xdf\xc7\x7d\xb1\x45\x85\xc6\xd0\x2d\x42\x73\x0a\xfb\xf5\xc2\x99\xdd\xa5\xf0\x5b\xf2\xf3\x6a\xb4\x5f\x51\xbd\xe5\x32\x85\x04\xa8\xb3\x0a\xde\x27\xf5\xeb\x38\xc1\xc3\x2d\xa8\xe0\x5b\x99\x42\x81\xd2\xa2\x3e\xc7\xdb\x11\x83\x52\xe9\x6a\x51\x72\x14\xec\x47\x60\x9f\x6b\x3b\x11\xa3\xd6\x4a\xf7\x9d\x99\x1f\xd5\x9a\xe0\xc6\x2e\x82\xb4\x29\x48\x25\x71\x1c\xad\x29\x63\x5c\x6e\x17\x02\x4b\x9b\x42\xf2\x6d\xcc\x04\x9f\x90\xdb\x28\xcd\x50\x2f\x0a\x25\x94\x4e\xe1\xdd\xe3\x63\x92\x24\xc9\x6a\x92\xf2\xba\x30\x3b\xca\xd4\x8b\xe7\xea\xff\xee\xeb\xd7\x37\x52\x69\xf1\xbc\xd5\xca\x49\x36\xa8\xf8\xf0\xfe\xe1\x97\x71\x5a\x1f\x4b\x92\x6b\x68\x81\x90\xa6\x8c\x3b\x93\xc2\xaf\x53\x51\x3a\xd5\x16\x1b\x65\xad\xaa\x52\xb8\xbf\x50\x6d\xac\xcb\xfd\x95\xa1\x65\xcb\x20\xea\xba\x37\x6f\xa1\x79\x6d\x87\xee\xfd\x4a\xf7\xb4\xdb\x1d\x98\x78\x4f\x35\x04\x35\x0d\xe4\xf0\xfb\xd3\xa7\x3f\xe3\x9a\x6a\x83\x51\xd3\xc4\x4f\x56\x73\xb9\x35\xf1\xa3\xd2\xd5\xc7\x90\xd2\xb6\xf3\x33\xea\xe9\x1f\x5e\x42\xe4\x61\x54\x09\x5f\xff\x72\xa8\x0f\xf0\x53\x9e\xc3\xcc\xc9\xee\xd7\xc7\x66\xf3\xc9\x74\x6e\xa3\xd2\xc9\xc2\x72\x25\xa3\x69\xa8\xaf\xd7\x51\x8a\x05\xca\xad\xdd\x41\x9e\x43\x72\x2d\xd3\x2f\x8d\xd6\x69\xb9\xba\x88\xb5\x17\x3b\x17\x1b\x27\xff\xe4\x70\x1b\xcd\x32\x27\xa0\x10\xd4\x98\x9c\x8c\xed\x45\xd6\xd9\xd2\x89\xf5\x6c\x7e\x09\x72\xb1\x51\x2a\x0d\x91\xd7\x94\x43\x0e\xc9\x0a\x38\x64\x30\xea\x65\x05\xfc\xee\xee\xad\x5e\x7a\xc4\x98\xd6\x35\x4a\x16\xcd\x32\xc1\xd7\xb3\xbb\xae\xc0\x3f\xfc\xdf\xf8\x8f\x2e\xe1\x6e\x96\x2d\x7d\xe4\x0a\x23\x08\xfa\xce\xde\x0d\x4f\x3d\xfa\xdb\x61\x1e\x53\xc6\x1e\x7c\x7f\x51\xd7\x1f\xb9\x72\xfa\x1b\x44\xbb\x8d\x88\xbf\x72\xc8\x3c\xae\x35\x06\x96\x3d\xeb\x49\xbd\xa1\x57\x4e\x0e\x0d\xf6\x3b\x5a\xb4\x69\x78\x09\x27\x97\x7d\xac\x28\x17\x1f\x18\xd3\x68\x4c\xdb\x8e\xa0\x33\xc6\xf7\xfd\x68\xa6\x17\xee\xc0\xca\x7e\x7d\x80\x3e\x01\x34\x1a\xb4\x80\xbe\x2c\xec\xa8\x81\x0d\xa2\x04\x83\xd2\x82\x55\x30\xb0\xf7\x18\x38\x1e\x95\xfb\x2c\x90\x1a\x84\x62\x87\xc5\x33\x1c\x94\xd3\xc7\x7a\x7e\xcc\x14\xf6\xa8\x79\xc9\x0b\xea\x9d\x0c\x82\xcb\x67\xb0\x3b\x6a\xa1\xa0\x12\x36\x08\xce\x20\xf3\x50\x1d\x8f\x70\xb8\xe7\x76\x06\xc9\x96\x8c\xef\xd7\x47\x39\x50\x18\x6c\xcf\x23\xc8\xbc\xce\x50\xa1\xdd\x29\x96\x93\xcf\x9f\x9e\xfe\x26\x47\xe5\xae\x09\x73\x7e\x0f\x4c\x24\x09\x89\x82\x6e\x30\xd0\xce\x49\xe8\x80\xac\x8f\xad\x85\x77\xcb\xb0\x35\xda\x29\x01\x5c\x42\xb8\xb3\xde\x68\x21\xcd\x96\xa1\xe6\x15\x2c\x2e\x6b\x67\x81\xb3\x1e\x0a\x24\xad\xf0\xf4\x70\xbe\x90\x08\x2c\xc7\xa7\x8f\x62\x7c\x67\x8b\x1d\x6c\x57\xde\xb8\x4d\xc5\x2d\x81\x3d\x15\x0e\x73\xf2\x74\x7c\xfc\x1f\xbc\x6c\xe9\x11\x4e\xd3\x90\xcc\x7f\x09\x0c\x3f\x11\x4a\xa5\x6c\xff\x89\x70\x4c\xf8\x2f\x00\x00\xff\xff\xee\xd6\xc2\x99\x64\x08\x00\x00")

func templatesForgot_passwordHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesForgot_passwordHtml,
		"templates/forgot_password.html",
	)
}

func templatesForgot_passwordHtml() (*asset, error) {
	bytes, err := templatesForgot_passwordHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/forgot_password.html", size: 2148, mode: os.FileMode(438), modTime: time.Unix(1473318888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesForgot_password_emailHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x41\x4f\xf3\x30\x0c\x86\xef\xf9\x15\xfe\x7a\xde\x97\x1f\xc0\x75\x20\xc1\x05\x21\x60\x48\x9c\xaa\xd0\xbc\x6d\xad\x65\xf1\x48\xdc\x8d\xaa\xca\x7f\x47\xed\x54\x81\xd0\x8e\x89\xfd\xd8\x7e\x9f\x69\xf2\x68\x39\x82\xaa\x21\x23\xd5\xad\xa4\x4e\xb4\x3e\xba\x9c\xcf\x92\x7c\x8d\x83\xe3\x50\x95\x62\xee\x11\x82\xd0\x34\xd9\x5d\x46\xb2\xb7\x9c\x8f\xc1\x8d\x8f\xee\x80\x52\x36\xc6\xbc\xcb\x40\xbd\x3b\x81\x12\x3e\x07\x64\x85\x27\x15\x4a\xc8\x50\x1a\x65\x48\x33\xb8\x95\xd8\x72\x67\x33\x2b\xea\xb8\x80\xb4\xae\xb1\xc6\x3c\x05\xb8\x8c\xdf\xc8\x5a\xa4\x8f\x91\x9a\xc0\xcd\x9e\x63\x47\xda\x83\x5a\x09\x41\xce\xf3\x2b\x70\xdc\xdf\xfc\x9d\x3d\xa4\x50\xca\xe5\x4f\xf1\xa5\xf6\x2e\x06\x3e\x21\xda\xad\x24\xd8\x9d\x72\xb0\x2f\x9a\x9e\x71\x0c\xae\x01\xad\xe4\xd5\xf0\xcb\x31\x75\x92\x41\x41\xd5\xd4\x88\x47\xa9\xe8\x22\xe0\x0d\x89\x5b\x6e\x9c\xb2\xc4\xed\x5c\x28\xc6\x3c\xb4\xf3\xe1\xe4\xd9\x53\x14\x5d\x55\x90\xfb\x49\xb2\x0c\xdc\x2c\x5d\x07\x37\x92\xe7\x9c\xd0\xb9\xe4\x49\x7b\xce\xb4\xb8\xb6\xc6\xbc\xf6\x2e\xee\xe7\xa6\x7f\xe6\xff\x75\x71\x66\x9a\x10\x7d\x29\xdf\x01\x00\x00\xff\xff\x0e\x0f\x60\xc7\xbd\x01\x00\x00")

func templatesForgot_password_emailHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesForgot_password_emailHtml,
		"templates/forgot_password_email.html",
	)
}

func templatesForgot_password_emailHtml() (*asset, error) {
	bytes, err := templatesForgot_password_emailHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/forgot_password_email.html", size: 445, mode: os.FileMode(438), modTime: time.Unix(1473318888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x5d\x4f\xdb\x30\x14\x7d\xef\xaf\xb8\xf3\x98\xda\x0a\xa5\x09\x6c\x7b\x09\x49\xf6\x80\xe0\x09\x69\x6c\x8c\xe7\xc9\xad\x9d\xd4\xcc\xb1\x23\x7f\x94\xa2\x28\xff\x7d\xb2\x93\x10\x07\x21\x26\xb1\x44\xb2\x74\x8f\xaf\xcf\x3d\x3e\xbe\x76\xdb\x12\x5a\x32\x41\x01\x59\x4d\xd5\x6f\x2e\x2b\x26\x50\xd7\x2d\xda\xd6\xd0\xba\xe1\xd8\x50\x40\x7b\x8a\x09\x55\x08\x36\x5d\xb7\x58\x64\xda\x3c\x71\x0a\xe6\xa9\xa1\x39\x32\xf4\x68\xe2\x9d\xd6\xa8\x58\x00\x00\x10\x76\xd8\x94\x52\xd5\x51\xc9\x28\x27\xd0\x7a\xd0\x7d\x8f\x8c\x98\x7d\x0a\x5f\x93\x4f\x17\xcf\x58\x8d\x55\xc5\x44\x0a\x09\x60\x6b\x24\x9c\x27\xcd\xb1\x9f\xec\xfc\x68\xf9\x86\x2a\x25\x55\x54\x53\xad\x71\x45\xf5\x7b\xe9\xdc\xc7\x99\x36\x91\x17\x9e\x82\x90\x82\x4e\x33\x0d\x26\x84\x89\x2a\xe2\xb4\x34\x29\x24\x6f\x2b\xe0\x2c\x10\xb1\x95\x8a\x50\x15\xed\x24\x97\x2a\x85\x8f\xd7\xd7\x49\x92\x24\x17\xc1\xf4\x31\xd2\x7b\x4c\xe4\xa3\xd3\xe4\xfe\xb3\xe6\xf8\x4a\x1a\xde\xfd\xa9\x94\xb4\x82\x04\x4c\x97\xe7\x97\x9f\xa7\x94\x11\x4f\x92\x97\x15\xbc\x00\x85\x09\xb3\x3a\x85\x2f\xe1\x86\x7b\x37\xa2\xad\x34\x46\xd6\x29\x9c\xcd\xdc\x98\xef\xf9\x2c\x30\x3e\x8b\xbd\x49\x85\x3b\xe6\x9d\x62\x8d\x09\xcf\xf9\x01\x1f\x70\x8f\x0e\xc7\x7d\xc0\x0a\xbc\x43\x90\x43\xdb\x6e\xee\x8c\x62\xa2\xd2\x9b\x1b\xd7\x43\x57\x0e\xef\xba\x9e\xd8\x0f\xac\x84\x95\x63\x93\x25\x3c\xfc\xb0\x54\x3d\xc1\x87\x3c\x87\xa5\x15\x7d\x03\x92\xe5\x3a\x30\xf7\x64\x55\x5a\xb1\x33\x4c\x8a\x55\x08\x8f\x3c\x43\xd5\x1c\x10\x7a\x39\xed\x3e\x45\x8d\x55\xe2\x62\x86\x77\xb3\x68\x16\x9c\xac\x90\xeb\x5a\xb4\xde\x34\x8a\x36\x54\x90\xd5\x6a\x99\x59\x0e\x3b\x8e\xb5\xce\xd1\xbc\x09\x50\x91\x71\x56\x2c\x4f\x3d\x7a\xba\xcc\x62\xce\x8a\x2c\xb6\xbc\x58\xae\xd7\x53\xc5\x6e\x1d\x58\xea\x3d\x73\x9e\xba\x2a\x50\x53\xb3\x97\x24\x47\xb7\xdf\xef\x7e\xa1\x62\xe1\xd3\x32\xc2\x0e\x63\xb9\xe9\x02\x0d\x36\xfb\x04\x8e\xb7\x94\x43\x29\x55\xee\x2f\xaa\xc0\x35\x45\xc5\x55\x8d\x19\x8f\xef\x87\x38\xcd\x62\x9f\x15\xac\x62\xa2\xb1\x06\x18\x09\x16\x81\x1b\xc3\x78\x3a\x61\x04\x71\xbf\x36\x8b\x09\x3b\xfc\x9f\xb4\x5b\xac\xf5\xa3\x54\xe4\x4d\x51\xcd\x90\x34\x8a\x9a\xe2\x5e\xd4\x14\xbf\x4b\x58\x5f\xa8\xa7\xd2\x76\x5b\x33\x83\xe0\x80\xb9\xa5\x39\xba\x1b\xc2\x39\xef\x73\x67\xb4\x2d\x2b\xe1\xb9\xa1\xaf\xa5\xaa\xa4\x19\x77\x74\xff\xf3\xa6\x9b\x9a\xe9\x9f\x2a\x7c\x12\x86\xbd\xa2\x65\x8e\x82\x5b\xf2\x0a\x29\x2a\x7a\x10\x46\xf4\x5b\x16\xe3\x60\x3f\x93\xc8\xb6\xa5\x82\xf8\xd7\x38\x76\x45\x8b\xc5\xec\xbd\x2e\xa5\x34\xe3\x7b\x3d\x64\xfe\x0d\x00\x00\xff\xff\xa9\xb6\x61\x95\xe7\x05\x00\x00")

func templatesLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoginHtml,
		"templates/login.html",
	)
}

func templatesLoginHtml() (*asset, error) {
	bytes, err := templatesLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/login.html", size: 1511, mode: os.FileMode(438), modTime: time.Unix(1473318888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProfileHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x96\x51\x6f\xdb\x36\x10\xc7\xdf\xfd\x29\x6e\x6c\x06\xcb\x08\x2c\x2b\xdd\xf6\x62\x4b\x7a\x49\x9b\x87\x01\x6b\x33\x64\xdd\xcb\x30\x0c\x8c\x79\xb2\xd9\x51\xa4\x40\x52\x4e\x0c\x41\xdf\x7d\x20\x29\x59\x92\xd1\x05\x46\x13\x1a\x90\x75\xc7\x3f\x8f\x3f\xde\x9d\x04\x35\x0d\xc3\x82\x4b\x04\x52\x1b\xd4\xff\x54\x5a\x15\x5c\x20\x69\xdb\x59\xd3\x58\x2c\x2b\x41\x2d\x02\xd9\x23\x65\xa8\x09\xc4\x6d\x3b\x9b\xa5\xc6\x1e\x05\x82\x3d\x56\x98\x11\x8b\xcf\x76\xb5\x35\x86\xe4\x33\x00\x00\xc6\x0f\x71\xa1\x74\xb9\x2c\x38\x0a\x06\x8d\x77\xba\xf1\xc4\x99\xdd\xaf\xe1\x97\xe4\xc7\xcd\xc9\x57\x52\xbd\xe3\x72\x0d\x09\xd0\xda\x2a\x78\x9f\x54\xcf\x61\xb2\xf5\xd7\x5a\xc4\xa8\xb5\xd2\xcb\x12\x8d\xa1\x3b\x34\xdf\x1b\xce\x0d\xc1\x8d\x5d\x7a\xf0\x35\x48\x25\x71\x98\xa9\x28\x63\x5c\xee\x96\x02\x0b\xbb\x86\xe4\x65\x02\xc1\x47\x10\x8f\x4a\x33\xd4\xcb\xad\x12\x4a\xaf\xe1\xdd\xdd\x5d\x92\x24\xc9\x66\x34\xfd\xbc\x34\x7b\xca\xd4\x93\x63\x72\xbf\x9b\xea\xf9\x1b\x32\xba\xfd\x77\xa7\x55\x2d\xd9\x28\xd2\xed\xfb\xdb\x9f\x06\x49\xef\x4f\x92\xf3\x1d\x3c\x80\xa6\x8c\xd7\x66\x0d\x3f\x8f\x0f\x1c\xb2\xb1\x7c\x54\xd6\xaa\x72\x0d\x37\x93\x6c\x4c\xcf\x7c\x33\x4a\x7c\xba\xf2\x49\xca\x5d\x99\xb7\x9a\x57\x76\x5c\xe7\xaf\xf4\x40\x83\xb7\x2b\xf7\x81\x6a\xf0\x19\x32\x90\xc1\xaf\x0f\x9f\x3f\xc5\x15\xd5\x06\xa3\xa6\x89\x1f\xac\xe6\x72\x67\xe2\x3b\xa5\xcb\x8f\x5e\xd2\xb6\x8b\xb0\x8b\xbf\xf0\x02\x22\x17\x5a\x15\xf0\xf5\xf7\x1a\xf5\x11\x7e\xc8\x32\x98\xd7\x32\xf4\x23\x9b\x2f\x46\x99\xbe\x8a\x8a\x5a\x6e\x2d\x57\x32\x1a\xbb\xfb\x38\x01\x21\x16\x28\x77\x76\x0f\x59\x06\xc9\xb9\xca\x0d\x8d\xb6\xd6\x72\x33\xf1\xb7\x13\x6b\x62\x9c\x6a\x9e\xc1\x55\x34\x4f\x6b\x01\x5b\x41\x8d\xc9\xc8\xb4\x25\x48\x9e\xae\x6a\x91\xcf\x17\x9b\xff\x0f\x55\x28\x0d\x91\xcb\x15\x87\x0c\x92\x0d\x70\x48\x61\xc2\xbc\x01\x7e\x7d\xfd\x2d\xe6\x7e\x97\x98\x56\x15\x4a\x16\xcd\x53\xc1\xf3\xf9\x75\x58\xfc\x17\xff\x3b\xfe\x2d\x08\xae\xe7\xe9\xca\xcd\x9c\x51\x84\xdc\xcd\xdf\x8d\x57\xdc\xb9\x27\x73\x11\x53\xc6\x6e\xdd\x79\xa2\x70\x1e\xb2\xb8\x38\x31\x57\x11\x71\x8f\x38\x59\xc4\x95\x46\x4f\xd5\x53\x8e\x62\xf4\xb5\xf6\x1d\xe5\x5b\xc6\xb5\x94\x5b\x07\x25\xda\xbd\x62\x19\xb9\xff\xfc\xf0\x07\xc9\x67\x5e\x96\x32\x7e\xe8\xf3\x3b\xbc\x3f\xba\x2e\xf3\x02\x41\x1f\x51\xb8\x4c\x66\xfe\x4d\x25\x69\x89\x24\xff\xc0\x4d\x25\xe8\x11\x3e\xd1\x12\xd7\xe9\xca\x6b\x46\x6b\xb8\xac\x6a\x0b\x9c\x65\x84\x05\xa1\xd3\x11\x70\x6b\xcf\x5c\x43\x93\x13\x38\x50\x51\x63\x46\x7c\x0f\x2b\x4d\x77\x18\x7f\x31\xa8\xe3\x0f\x83\xbe\x6d\x09\xac\xc2\x3e\xe9\x8a\xf1\xc3\xeb\x0e\xf1\xa5\xbb\x7b\xf1\x00\x27\x79\x47\x3f\xd8\x17\xa0\xf7\x3b\xbc\x05\x37\x96\x94\x0b\x92\x7f\x74\x7f\x2f\x12\x07\x61\x87\xdb\x19\x17\xb0\xfa\xc0\x6f\x01\x5a\x51\x63\x9e\x94\x66\x24\xbf\xef\xee\x5e\xc4\x3d\xc9\x3b\xe2\xc1\x0e\xd0\x83\xfd\x5a\xb0\x03\x6a\x5e\x1c\xef\x4f\x78\x7f\x7a\x1b\x2e\xa2\x3c\x5b\xdb\xb1\x9e\x7b\xdf\x84\x38\x6c\x1a\x42\x99\xfa\xb1\xe4\x43\xcd\x1e\x3a\xf3\x2c\x6e\xba\x72\x91\xf2\xd9\xe4\xd3\xa1\x50\xca\xf6\x9f\x0e\x4d\x83\x92\xb5\xed\x7f\x01\x00\x00\xff\xff\xa9\x54\x51\x6b\x74\x08\x00\x00")

func templatesProfileHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesProfileHtml,
		"templates/profile.html",
	)
}

func templatesProfileHtml() (*asset, error) {
	bytes, err := templatesProfileHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/profile.html", size: 2164, mode: os.FileMode(438), modTime: time.Unix(1473318888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRegisterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x95\x51\x8f\xa3\x36\x10\x80\xdf\xf3\x2b\xa6\xbe\xad\x20\x5a\x05\xd8\x6b\xfb\x42\x80\x97\xd5\xed\x43\xa5\xf6\xb6\x4d\xdb\x97\xaa\xaa\x9c\x78\x48\x7c\x35\x36\xb2\x4d\x36\x11\xe2\xbf\x57\x36\x90\x40\x74\x5d\xad\xae\xe7\x48\x0e\x33\x1e\xcf\x7c\x9e\x19\x4c\xdb\x32\x2c\xb9\x44\x20\x8d\x41\xfd\xb7\xc6\x3d\x37\x16\x35\xe9\xba\x45\xdb\x5a\xac\x6a\x41\x2d\x02\x39\x20\x65\xa8\x09\x44\x5d\xb7\x58\x64\xc6\x9e\x05\x82\x3d\xd7\x98\x13\x8b\x27\x1b\xef\x8c\x21\xc5\x02\x00\x80\xf1\x63\x54\x2a\x5d\xad\x4a\x8e\x82\x41\xeb\x95\x6e\xbc\x70\x66\x0f\x29\xfc\x90\x7c\xbb\xbe\xe8\x2a\xaa\xf7\x5c\xa6\x90\x00\x6d\xac\x82\xf7\x49\x7d\xea\x17\x3b\x3f\x37\x22\x42\xad\x95\x5e\x55\x68\x0c\xdd\xa3\xf9\x52\x77\x6e\x08\x6e\xec\xca\x83\xa7\x20\x95\xc4\xeb\x4a\x4d\x19\xe3\x72\xbf\x12\x58\xda\x14\x92\xd7\x09\x04\x9f\x40\x6c\x95\x66\xa8\x57\x3b\x25\x94\x4e\xe1\xdd\xd3\x53\x92\x24\xc9\x7a\xb2\x7c\x5a\x99\x03\x65\xea\xc5\x31\xb9\xdf\x43\x7d\xfa\x8c\x19\xdd\xfd\xb3\xd7\xaa\x91\x6c\xe2\xe9\xf1\xfd\xe3\x77\x57\x93\x51\x9f\x24\xb7\x11\x3c\x80\xa6\x8c\x37\x26\x85\xef\xa7\x07\xee\xb3\xb1\xda\x2a\x6b\x55\x95\xc2\xc3\x2c\x1b\xf3\x33\x3f\x4c\x12\x9f\xc5\x3e\x49\x85\x2b\xf3\x4e\xf3\xda\x4e\xeb\xfc\x89\x1e\x69\xaf\x1d\xca\x7d\xa4\x1a\x7c\x86\x0c\xe4\xf0\xe3\xe6\xe3\xcf\x51\x4d\xb5\xc1\xb0\x6d\xa3\x8d\xd5\x5c\xee\x4d\xf4\xa4\x74\xf5\xc1\x9b\x74\xdd\xb2\x8f\xe2\x27\x5e\x42\xe8\x5c\xab\x12\x3e\xfd\xd2\xa0\x3e\xc3\x37\x79\x0e\x41\x23\xfb\x86\x64\xc1\x72\x92\xe9\xbb\xb0\x6c\xe4\xce\x72\x25\xc3\xa9\x7a\xf4\xd3\x23\x44\x02\xe5\xde\x1e\x20\xcf\x21\xb9\xb5\x72\x43\xa3\x6d\xb4\x5c\xcf\xf4\xdd\x4c\x9a\x09\x97\x9a\xe7\x70\x17\x06\x59\x23\x60\x27\xa8\x31\x39\x99\xb7\x04\x29\xb2\xb8\x11\x45\xb0\x5c\xff\xb7\xab\x52\x69\x08\x5d\xae\x38\xe4\x90\xac\x81\x43\x06\x33\xe6\x35\xf0\xfb\xfb\xcf\x31\x8f\x51\x22\x5a\xd7\x28\x59\x18\x64\x82\x17\xc1\x7d\xbf\xf9\x4f\xfe\x57\xf4\x53\x6f\x70\x1f\x64\xb1\x5b\xb9\xa1\xe8\x73\x17\xbc\x9b\xee\x78\x72\x6f\xe6\x32\xa2\x8c\x3d\xba\xf3\x84\xfd\x79\xc8\xf2\xcd\x89\xb9\x0b\x89\x7b\xc5\xc9\x32\xaa\x35\x7a\xaa\x91\x72\xe2\x63\xac\xb5\xef\x28\xdf\x32\xae\xa5\xdc\x3e\xa8\xd0\x1e\x14\xcb\xc9\xf3\xc7\xcd\x6f\xa4\x58\x78\xb3\x8c\xf1\xe3\x98\xdf\xeb\xfd\x31\x74\x99\x37\x10\x74\x8b\xc2\x65\x32\xf7\x57\x95\xa4\x15\x92\xe2\xf7\xe1\x29\xcd\x62\xbf\x3e\xb1\xe7\xb2\x6e\x2c\x70\x36\x31\x07\x37\x4f\xe5\x6b\x6b\x13\x38\x52\xd1\x60\x4e\x26\x9d\xfb\xeb\x70\x19\x8e\x41\xba\x8e\x40\xdc\x47\xc8\x62\xc6\x8f\x5f\x82\x8e\x15\xe5\x82\x14\x1f\xdc\xdf\xab\xd0\xbd\xe1\x40\x3c\x08\x6f\xc3\xf5\xbe\xbf\x06\x6b\x4d\x8d\x79\x51\x9a\x91\xe2\x79\x78\x7a\x95\xf8\x62\x3e\x40\x5f\xe5\x9e\xfb\x2a\xff\x5f\xb0\x23\x6a\x5e\x9e\x9f\x2f\x78\x7f\x78\x19\xde\x44\x79\xb3\x77\x60\xbd\xd5\x7e\x15\xe2\x3e\x68\xef\xca\x34\xdb\x8a\x5f\xcb\xb6\x19\xc4\x1b\xbf\x59\xec\x3c\x15\x8b\xd9\xb7\xb7\x54\xca\x8e\xdf\xde\xb6\x45\xc9\xba\xee\xdf\x00\x00\x00\xff\xff\xe3\x40\xc4\x3a\xb6\x07\x00\x00")

func templatesRegisterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesRegisterHtml,
		"templates/register.html",
	)
}

func templatesRegisterHtml() (*asset, error) {
	bytes, err := templatesRegisterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/register.html", size: 1974, mode: os.FileMode(438), modTime: time.Unix(1473318888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVerifyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\xc1\x6a\xdc\x30\x14\xbc\xfb\x2b\x06\x41\x8f\x6b\x2f\x85\x50\xd8\xd8\x3e\xf4\x9c\x53\x4b\x0b\x39\x15\xad\xf4\x6c\x3f\xd0\x4a\xae\xf4\xec\x64\x11\xfa\xf7\xe2\xcd\xc6\x25\x87\xe8\x24\x34\xa3\x37\x33\x8f\xc9\xd9\xd2\xc0\x9e\xa0\x96\x44\xf1\xcf\x4a\x91\x87\xab\x2a\xa5\xca\x59\xe8\x32\x3b\x2d\x04\x35\x91\xb6\x14\x15\xea\x52\xaa\xaa\x4d\x72\x75\x04\xb9\xce\xd4\x29\xa1\x57\x69\x4c\x4a\xaa\xaf\x00\xc0\xf2\x5a\xbf\x8d\x38\x5c\x28\x25\x3d\x12\xf2\x0d\xd8\xce\x0b\x5b\x99\x4e\x78\x38\x7e\x79\xdc\xdf\x2e\x3a\x8e\xec\x4f\x38\x42\x2f\x12\xf0\xf5\x38\xbf\xfe\x07\xb7\xe1\x07\xed\x78\xf4\x27\x18\xf2\x42\xf1\x0d\x2b\x55\xdb\xdc\x4c\xf4\x55\xd5\x5a\x5e\x61\x9c\x4e\xa9\x53\x1f\x95\xef\x96\x72\xe6\x01\xf5\xf7\x10\x1c\x69\x9f\xea\xdf\x1b\x87\xc9\x96\xb2\xcb\x3c\x87\x25\x42\x1b\x13\x16\x2f\x98\x74\xc2\x99\xc8\x63\xbd\x13\xeb\xf6\x1c\xd1\xf4\xcf\x61\xc1\x0b\x3b\x87\x33\x21\x92\xe5\x48\x46\xc8\x42\x02\x64\x22\xb4\x1a\x53\xa4\xa1\x53\x39\xd7\x3f\x25\xb2\x1f\x53\xfd\x14\x46\xf6\xbf\x7e\x3c\x95\xa2\xfa\xdb\xbd\x6d\x74\x8f\x79\xdb\x09\x7b\x3c\x20\x91\x09\xde\xa6\x7a\xf7\xd1\x5e\x48\x34\x26\x91\xf9\x40\x7f\x17\x5e\x3b\x15\x69\x88\x94\x26\x05\x13\xbc\x90\x97\x4e\x7d\x7b\xc4\x12\x5d\xf7\x89\xcc\x3d\x30\xb9\x44\x9f\xe5\x33\x61\x71\x16\x3e\xc8\x16\x64\xcf\xf8\xfe\xd1\x6f\x7b\x69\x1b\xcb\x6b\x5f\x7d\x68\xc0\x10\x82\xbc\x37\xe0\xce\xfb\x17\x00\x00\xff\xff\xb6\xfe\xa1\xc9\x3a\x02\x00\x00")

func templatesVerifyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesVerifyHtml,
		"templates/verify.html",
	)
}

func templatesVerifyHtml() (*asset, error) {
	bytes, err := templatesVerifyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/verify.html", size: 570, mode: os.FileMode(438), modTime: time.Unix(1473318888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVerify_emailHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xc1\x4a\xf4\x40\x10\x84\xef\xf3\x14\xfd\xe7\xfc\x3b\x0f\xe0\x35\x0a\x9e\x44\xd4\xf5\x1a\xc6\xa4\x92\x6d\xd2\x3b\xb3\xf4\x4c\x16\xc3\xd0\xef\x2e\xd9\x20\x2c\xe2\xb5\x8a\xaf\x8a\xaf\xd6\x01\x23\x47\x50\xb3\x64\x68\x77\x81\xf2\xb8\x76\x38\x05\x96\xc6\xcc\x3d\x41\x24\x51\xad\xfe\x90\xa1\xfe\x81\xf3\x59\xc2\xfa\x1c\x4e\x30\xfb\xef\xdc\xfb\x31\xc4\x99\xd6\xb4\xd0\x98\x94\x14\x13\xe7\x02\xe5\x38\x51\x28\x1b\xd4\xa6\x38\xf2\xe4\x33\x17\x74\xf1\x0a\x79\xe7\x5e\x04\x21\x83\xf6\xa7\x0d\x56\xba\xde\x51\x18\x06\x45\xce\xf4\xb9\x52\x2f\xdc\xcf\xdb\x4e\x39\x72\x26\xe1\x38\xdf\xff\xde\x5b\x54\xcc\xf6\xac\xe0\xab\xf8\xc7\x28\x7c\x41\xf4\x6d\x52\xf8\x43\x61\xf1\x6f\x45\x5f\x71\x96\xd0\x83\x7e\xc8\x5b\x47\x4d\x4b\x01\x35\xb5\x4f\x03\xac\xa1\xdd\xf0\x63\xeb\xb8\x0f\x85\x53\x6c\xb7\xc2\x6e\x2c\xff\xb9\xbb\xbf\xad\x5c\xad\x88\x83\xd9\x77\x00\x00\x00\xff\xff\xe3\x91\xe9\xb9\x4d\x01\x00\x00")

func templatesVerify_emailHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesVerify_emailHtml,
		"templates/verify_email.html",
	)
}

func templatesVerify_emailHtml() (*asset, error) {
	bytes, err := templatesVerify_emailHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/verify_email.html", size: 333, mode: os.FileMode(438), modTime: time.Unix(1473318888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/forgot_password.html": templatesForgot_passwordHtml,
	"templates/forgot_password_email.html": templatesForgot_password_emailHtml,
	"templates/login.html": templatesLoginHtml,
	"templates/profile.html": templatesProfileHtml,
	"templates/register.html": templatesRegisterHtml,
	"templates/verify.html": templatesVerifyHtml,
	"templates/verify_email.html": templatesVerify_emailHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"forgot_password.html": &bintree{templatesForgot_passwordHtml, map[string]*bintree{}},
		"forgot_password_email.html": &bintree{templatesForgot_password_emailHtml, map[string]*bintree{}},
		"login.html": &bintree{templatesLoginHtml, map[string]*bintree{}},
		"profile.html": &bintree{templatesProfileHtml, map[string]*bintree{}},
		"register.html": &bintree{templatesRegisterHtml, map[string]*bintree{}},
		"verify.html": &bintree{templatesVerifyHtml, map[string]*bintree{}},
		"verify_email.html": &bintree{templatesVerify_emailHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

